1.如果需要多次访问某个dom节点，请使用局部变量存储对它的引用
var h1 = element1.clientHeight + num1;
var h2 = element1.clientHeight + num2;
->
var eleHeight = element1.clientHeight;
var h1 = eleHeight + num1;
var h2 = eleHeight + num2;

2.使用速度更快的API，比如querySelectorAll代替getElementById和firstChild代替childNodes(见efficiency.html)

3.使用事件委托来减少事件处理器的数量(见efficiency.html)

4.函数中读写局部变量总是最快的，而全局变量的读取则是最慢的

5.闭包尽管强大，但不可滥用，否则会影响到执行速度以及内存(见闭包内存泄露.doc)

6.使用 DocumentFragment 优化多次 append(见efficiency.html)

7.使用一次 innerHTML 赋值代替构建 dom 元素(见efficiency.html)

8.使用 firstChild 和 nextSibling 代替 childNodes 遍历 dom元素(见efficiency.html)

9.使用 Array 做为 StringBuffer，代替字符串拼接的操作(见efficiency.html)

10.将循环控制量保存到局部变量:
var i = 0, i < list.length; i++ -> var i = 0, l = list.length; i < l; i++

11.顺序无关的遍历时，while替代 for
var arr = [1,2,3,4,5,6,7];
var sum = 0, l = arr.length;
while (l--) {
	sum += arr[l];
}

12.在同一条件子的多（ >2）条件分支时，使用 switch 优于 if,使用三目运算符替代条件分支,使用&&代替if判断：
if(!e) e = window.event;-> e = e || window.event;
if (myobj) {
	doSomething(myobj);	-> myobj && doSomething(myobj);
}

13.使用 function 而不是 string:
setTimeout('addNum', 10); -> setTimeout(addNum, 10);

14.尽量不使用动态语法元素, eval、 Function 、 execScript 等语句会再次使用 javascript 解析引擎进行解析，需要消耗大量的执行时间

15.不要使用包装对象，如：
var a = new Array(param,param,...) -> var a = []
var foo = new Object() -> var foo = {}
var reg = new RegExp() -> var reg = /.../

16.不要使用with

17.类型转换

数字转字符串效率：("" +) > String() > .toString() > new String();
浮点数转换成整型，不使用 parseInt()， parseInt()是用于将字符串转换成数字，而不是浮点数和整型之间的转换，建议使用 Math.floor()或者 Math.round()

18.IE下，脚本创建的 dom 对象，如果没有 append到页面中，刷新页面，这部分内存是不会回收的！

19.将 dom 元素的 innerHTML 设置为空字符串，可以释放其子元素占用的内存。

20.释放 javascript 对象
说明：在 rich 应用中，随着实例化对象数量的增加，内存消耗会越来越大。
所以应当及时释放对对象的引用，让 GC 能够回收这些内存控件。
对象： obj = null
对象属性： delete obj.myproperty


